/*!
  @page      build_system Internals

@tableofcontents{xml}

This page discusses the internals of the build system: how it works, how the
different pieces fit together, and the various ways it can be configured. This
page is intended for those who would like to understand how the build system
works and how it can be modified or extended.

@note This page is _not_ a description of how to build the third-party
libraries or Quinoa. For various ways of building Quinoa, including
requirements, optional libraries, defaults, and build system options, see the
page on @ref build "building".

@section build_system_overview Overview

As section _@ref build_stages_ on the @ref build "build page" describes, Quinoa
is built in two stages:

 1. Build third-party libraries (TPLs)
 2. Build Quinoa

Both stages consist of the following two steps

 - Use cmake to configure the build
 - Perform the build

As the section on @ref build_nonrecursive "non-recursive clones" discusses,
some of the [cmake code](https://github.com/quinoacomputing/cmake-modules) is
abstracted away into its own git repository so that it can be effectively
shared between the two repositories:
[quinoa](https://github.com/quinoacomputing/quinoa) and
[quinoa-tpl](https://github.com/quinoacomputing/quinoa-tpl). For more details,
see also the page on @ref git_submodules_subtrees "modules".

@section build_system_tpl Third-party-libraries build

In a @ref build_nonrecursive "recursive clone" the main entry point of the
TPL-build is [external/CMakeLists.txt](https://github.com/quinoacomputing/quinoa-tpl/blob/master/CMakeLists.txt). The TPL-build uses cmake's [external project](https://cmake.org/cmake/help/latest/module/ExternalProject.html) functionality to build the third-party libraries.

The following steps are taken by the TPL-cmake script to configure the build of the third-party libraries:

 - In-source builds are disallowed in [cmake/DisallowInSourceBuilds.cmake](https://github.com/quinoacomputing/cmake-modules/blob/master/DisallowInSourceBuilds.cmake).

 - The default build type is set in [cmake/BuildType.cmake](https://github.com/quinoacomputing/cmake-modules/blob/master/BuildType.cmake). This can be configured by the cmake variable `CMAKE_BUILD_TYPE`. Valid options are described at https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html. 

 - The operating system is detected in [cmake/DetectOS.cmake](https://github.com/quinoacomputing/cmake-modules/blob/master/DetectOS.cmake).

 - Whether a dynamically or statically linked build is performed is decided in [cmake/BuildSharedS.cmake](https://github.com/quinoacomputing/cmake-modules/blob/master/BuildShared.cmake). This can be configured by the cmake variable `BUILD_SHARED_LIBS` (_on_/_off_). The default is _off_, yielding a dynamic build (except on Crays).

   @warning If `BUILD_SHARED_LIBS` is configured one way for the TPL-build, make
sure the same is set for the Quinoa build. The default is _off_ for both, yielding shared objects for the third party libraries as well as for the Quinoa build, allowing dynamic linking.

 - The target build architecture is detected and configured in [cmake/TargetArch.cmake](https://github.com/quinoacomputing/cmake-modules/blob/master/TargetArch.cmake).

 - The install directory in which to install all third-party libraries is configured by the `CMAKE_INSTALL_PREFIX` cmake variable. For a @ref build_nonrecursive "non-recursive clone" the default is `quinoa/external/install/<compiler>-<architecture>/`, e.g., `quinoa/external/install/clang-x86_64/`.

...

@subsection build_system_tpl_cmake_vars Third-party-libraries build cmake variables

...

@section build_system_quinoa Quinoa build

...

@subsection build_system_quinoa_cmake_vars Quinoa build cmake variables

...


@section build_system_reated Related pages
- @ref mainpage_build "Quickstart on how to build"
- @ref git_submodules_subtrees "Third-party libraries and cmake code"
- @ref licenses "A list of all required and optional third-party libraries"
- @ref build_system "Build system internals"

*/
