/** @mainpage Quinoa

@m_div{m-col-t-4 m-right-t}
<img src="quinoa.svg"/>
@m_enddiv

__Adaptive computational fluid dynamics__

Quinoa is a set of computational tools that enables research and numerical
analysis in fluid dynamics. Using the [Charm++](http://charmplusplus.org/)
runtime system, we employ _asynchronous_ (or non-blocking) parallel programming
and decompose computational problems into a large number of work units (that may
be more than the available number of processors) enabling _arbitrary
overlap_ of parallel computation, communication, input, and output. Then the
runtime system _dynamically_ and _automatically_ homogenizes computational load
across the simulation distributed across many computers.

Our ultimate goal is to simulate large and complex engineering multiphysics
problems with a production-quality code that is extensible and maintainable,
using hardware resources efficiently, even for problems with _a priori_
unknown, heterogeneous, and dynamic load distribution. Read more at our @ref
why page.

@section mainpage_tools Tools

Quinoa consists of the following tools:

  - @ref walker_main --- __Time-integrator for stochastic differential
    equations__

    _Walker_ is a mathematical tool to analyze and design the behavior of
    stochastic differential equations. Solving a multivariate
    [Fokker-Planck equation](https://en.wikipedia.org/wiki/Fokker%E2%80%93Planck_equation),
    it allows the estimation of arbitrary coupled @ref statistics_output
    "statistics" and probability distributions as they evolve in time and
    is used for the design of @ref papers_walker "statistical moment approximations"
    for turbulent flows.

  - @ref inciter_main --- __Navier-Stokes solver for complex domains__

    _Inciter_ is a fully asynchronous distributed-memory-parallel fluid solver
    for complex engineering geometries. We are working on a compressible-flow
    solver using continuous and discontinuous Galerkin finite element methods,
    and solution-adaptive mesh-, and polynomial-degree refinement, enabling
    dynamically concentrating compute resources to regions with interesting
    physics.

  - @ref rngtest_main --- __Random number generators test suite__

    _RNGTest_ is a test harness to subject random number generators to stringent
    statistical tests, enabling quantitative ranking with respect to their
    quality and computational cost. Multiple generators can be tested from
    Intel's [Math Kernel Library](https://software.intel.com/en-us/intel-mkl),
    [RNGSSE](https://doi.org/10.1016/j.cpc.2013.04.007), and
    [Random123](http://www.thesalmons.org/john/random123/releases/latest/docs/index.html).

  - @ref unittest_main --- __Test suite for synchronous and asynchronous
    functions__

    _UnitTest_ is an asynchronous distributed-memory-parallel test harness,
    capable of testing serial, synchronous (e.g., MPI) parallel, and
    asynchronous parallel (e.g., Charm++) functions.

  - @ref meshconv_main --- __Tetrahedron-mesh converter__

    _MeshConv_ is a mesh file converter that can be used to convert tetrahedron
    meshes from and to either of the following formats:
    [Gmsh](http://www.geuz.org/gmsh),
    [Netgen](https://sourceforge.net/projects/netgen-mesher),
    [ExodusII](https://github.com/gsjaardema/seacas),
    [HyperMesh](http://www.altairhyperworks.com/product/HyperMesh), and
    ASC used in [Jacob Waltz](https://www.researchgate.net/scientific-contributions/2014382994_Jacob_Waltz)'s _Chicoma_ code.

@section mainpage_try Try

The quickest is to try the pre-built executables inside a [docker
container](https://hub.docker.com/r/quinoacomputing/quinoa). See also
- https://quinoacomputing.github.io/examples.html
- https://github.com/quinoacomputing/quinoa-examples

For larger problems and computers, however, you should build from source.

@section mainpage_directory_layout Directory layout

 - `cmake/` - CMake code shared between external packages (third-party libraries)
   at https://github.com/quinoacomputing/quinoa-tpl and `src/`.
 - `src/` - Compilable sources. For a more detailed description of the contents
   of the `src/` directory and its subdirectories, see
   `docs/pages/directories.dox`, rendered at
   https://quinoacomputing.github.io/files.html.
 - `docs` - Documentation, rendered at https://quinoacomputing.github.io.
 - `tests/` - Unit-, and regression tests.
 - `tools/` - Development utilities and docker files.
 - `external/` - External packages (third-party libraries) pulled in as git
   submodules.

@section mainpage_build Build

- Install prerequisites: _Debian/Ubuntu linux_ (line 1: required, line 2: recommended)

       apt-get install cmake gfortran gcc g++ openmpi-bin libopenmpi-dev
       apt-get install gmsh libpugixml-dev libpstreams-dev libboost-all-dev libblas-dev liblapack-dev liblapacke-dev libhypre-dev libhdf5-dev libhdf5-openmpi-dev libhypre-dev binutils-dev flex bison python3-pygments python3-jinja2 texlive-latex-base libdw-dev

- Install prerequisites: _Mac OS X_ (line 1: required, line 2: recommended)

       port install openmpi-clang60 & port select clang mp-clang-6.0 && port select mpi openmpi-clang60-fortran
       port install pugixml hdf5 +openmpi+clang60+hl

- Clone, build third-party libraries, build & test

       git clone --recurse-submodules https://github.com/quinoacomputing/quinoa.git; cd quinoa
       mkdir tpl/build; cd tpl/build; cmake -DCMAKE_CXX_COMPILER=mpicxx -DCMAKE_C_COMPILER=mpicc -DCMAKE_Fortran_COMPILER=mpif90 .. && make; cd -
       mkdir build; cd build; cmake -DCMAKE_CXX_COMPILER=mpicxx -DCMAKE_C_COMPILER=mpicc ../src && make && ./charmrun +p 8 Main/unittest -v -q && ctest -j 8 --output-on-failure -LE extreme

All executables will be under `build/Main/`.

@note The above is only the simplest way to build from source and by default
some optional libraries will _not_ be built. If you are building on a different
system, you might have to experiment with your package manager a bit to get all
required @ref licenses "libraries" built. The following may help with building in
various environments:
- https://github.com/quinoacomputing/quinoa/tree/master/docker
- https://github.com/quinoacomputing/quinoa-tpl/tree/master/docker
- https://github.com/quinoacomputing/buildenv

We roughly follow the development model described
[here](http://nvie.com/posts/a-successful-git-branching-model). As a
consequence, our
[master](https://github.com/quinoacomputing/quinoa/commits/master) (stable)
branch can lag behind our
[develop](https://github.com/quinoacomputing/quinoa/commits/develop) (bleeding
edge) branch. If you want the latest, clone with

```
git clone --recurse-submodules --branch=develop https://github.com/quinoacomputing/quinoa.git
```

Read more about other ways of cloning and working with [quinoa's
repositories](https://github.com/quinoacomputing) on the page detailing @ref
git_submodules_subtrees.

@section mainpage_contributing Contribute

Contributions and collaborators are welcome. Contact us via
[GitHub](https://github.com/quinoacomputing/quinoa),
[Email](mailto:quinoa@lanl.gov) or
[Gitter](https://gitter.im/quinoacomputing/quinoa).

@section mainpage_authors Authors

(in chronological order of contribution)

1. [Jozsef Bakosi](https://github.com/jbakosi)
2. [Francisco Gonzalez](https://github.com/franjgonzalez)
3. [Brandon Rogers](https://github.com/brog2610)
4. [Christoph Junghans](https://github.com/junghans)
5. [Robert Pavel](https://github.com/rspavel)
6. [Aditya Pakki](https://github.com/adityapakki)
7. [Bob Bird](https://github.com/rfbird)
8. [Aditya Pandare](https://github.com/adityakpandare)
9. [Weizhao Li](https://github.com/WeizhaoLi2018)

@section mainpage_resources Resources

- Source --- https://github.com/quinoacomputing/quinoa
- Releases --- https://github.com/quinoacomputing/quinoa/releases
- Contributing --- https://www.clahub.com/agreements/quinoacomputing/quinoa
- License --- https://github.com/quinoacomputing/quinoa/blob/master/LICENSE
- Third-party libraries and licenses --- https://quinoacomputing.github.io/licenses.html
- Documentation --- https://quinoacomputing.github.io
- Web --- https://quinoacomputing.github.io
- Email --- mailto:quinoa@lanl.gov
- Gitter --- https://gitter.im/quinoacomputing/quinoa
- Philosophy --- https://quinoacomputing.github.io/why
- Papers --- https://quinoacomputing.github.io/papers
- Roadmap --- https://github.com/quinoacomputing/quinoa/issues
- Doxygen --- https://quinoacomputing.github.io
- Coverage --- https://quinoacomputing.github.io/coverage
- Codecov --- https://codecov.io/gh/quinoacomputing/quinoa/commits
- Sonarqube --- https://sonarqube.com/organizations/quinoacomputing
- Docker --- https://hub.docker.com/r/quinoacomputing/quinoa
- Azure --- https://dev.azure.com/quinoacomputing/Quinoa
- Analytics --- http://www.openhub.net/p/quinoacomputing
- Cite --- https://zenodo.org/badge/latestdoi/38454430

@section mainpage_license License

@include LICENSE

*/
