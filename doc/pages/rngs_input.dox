/*!
  \page      rngs_input Random number generators input

This page discusses how to configure random number generators (RNG) in a
@ref walker_main or @ref rngtest_main control/input file.

@section Requirements

  - Any control file setup that needs one or more RNGs must contain an
    @code{.bash}rngs...end@endcode block. This is used to enable and configure
    one or more RNGs.

  - The @code{.bash}rngs...end@endcode block must appear before any reference to
    an RNG.

  - The @code{.bash}rngs...end@endcode block consists of a list of
    @code{.bash}<rngname>...end@endcode blocks, where
    @code{.bash}<rngname>@endcode is a placeholder for the name of the RNG to be
    enabled and configured. Currently, three different libraries are interfaced:
    Intel's [Math Kernel Library](https://software.intel.com/en-us/intel-mkl)
    (MKL), [RNGSSE](https://doi.org/10.1016/j.cpc.2013.04.007), and
    [Random123](http://www.thesalmons.org/john/random123/releases/latest/docs/index.html). See also the page on @ref rngtest_main. The first part of
    @code{.bash}<rngname>@endcode is the library, @code{.bash}mkl@endcode,
    @code{.bash}rngsse@endcode, or @code{.bash}r123@endcode, followed by an
    underscore, @code{.bash}_@endcode, followed by the name of the particular
    RNG from the given library.

  - Each @code{.bash}<rngname>...end@endcode block expects a different syntax,
    dependening on what options are available for (and interfaced with) the
    given RNG.

@section mkl_conf Configuration of MKL VSL RNGs

All RNGs provided by MKL can be configured to be initialized using a
user-specified @code{.shell}seed,@endcode and use a user-specified
@code{.shell}uniform_method@endcode, @code{.shell}gaussian_method@endcode,
@code{.shell}beta_method@endcode, and @code{.shell}gamma_method@endcode. For
more details on the available options for these keywords, see the on-screen help
from the executable, e.g.,

@code{.shell}
walker -H uniform_method
@endcode

@note MKL is optional. All features in Quinoa can be exercised if MKL is not
available.

@warning Not all MKL RNGs support generating random numbers in parallel. Only
@code{.bash}mkl_mcg31@endcode, @code{.bash}mkl_mcg59@endcode, and
@code{.bash}mkl_wh@endcode have leapfrog support and this will support
generating random numbers from independent streams, required to run in parallel.

@section rngsse_conf Configuration of RNGSSE RNGs

All RNGs provided by the RNGSSE library can be configured to be initialized
using a user-specified sequence length by the @code{.shell}seqlen@endcode
keyword. For more details on the available options for the
@code{.shell}seqlen@endcode keyword, see the on-screen help from the executable,
e.g.,

@code{.shell}
walker -H seqlen
@endcode

@warning Not all RNGSSE RNGs support all types of seqence lengths. See
tk::ctr::RNG::support for details.

@note RNGSSE2 is optional. All features in Quinoa can be exercised if RNGSSE2 is
not available.

@section r123_conf Configuration of Random123 RNGs

The RNGs provided by the Random123 library that are hooked up are _ThreeFry_ and
_Philox_. They can be configured to be initialized using a user-specified seed
@code{.shell}seed@endcode keyword.

@section rng_example Configuring random number generators

Here is an example control file block configuring multiple generators.

@code{.bash}
  rngs
    mkl_mcg59
      seed 2134
      uniform_method accurate
    end

    mkl_r250 seed 1 end
    mkl_mcg31 end
    mkl_mrg32k3a seed 0 end

    rngsse_mrg32k3a end
    rngsse_gq58.4
      seqlen long
    end

    r123_threefry end
  end
\endcode
*/
