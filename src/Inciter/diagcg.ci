// *****************************************************************************
/*!
  \file      src/Inciter/diagcg.ci
  \copyright 2012-2015, J. Bakosi, 2016-2018, Los Alamos National Security, LLC.
  \brief     Charm++ module interface for continuous Galerkin FEM w/o matrix
  \details   Charm++ module interface file for the continuous Galerkin
     discretization scheme using a diagonal matrix for the left hand side.
  \see       DiagCG.h and DiagCG.C for more info.
*/
// *****************************************************************************

module diagcg {

  extern module transporter;
  extern module discretization;

  include "UnsMesh.h";
  include "PUPUtil.h";
  include "FaceData.h";

  namespace inciter {

    array [1D] DiagCG {
      entry DiagCG( const CProxy_Discretization& disc, const FaceData& fd );
      initnode void registerReducers();
      entry void setup( tk::real v );
      entry void dt();
      entry void diag();
      entry void advance( tk::real newdt );
      entry void comlhs( const std::vector< std::size_t >& gid,
                         const std::vector< std::vector< tk::real > >& L );
      entry void comrhs( const std::vector< std::size_t >& gid,
                         const std::vector< std::vector< tk::real > >& R );
      entry void comdif( const std::vector< std::size_t >& gid,
                         const std::vector< std::vector< tk::real > >& D );
      entry void resized();
      entry void lhs();

      // SDAG code follows. See http://charm.cs.illinois.edu/manuals/html/
      // charm++/manual.html, Sec. "Structured Control Flow: Structured Dagger".

      entry void wait4lhs() {
        when ownlhs_complete(), comlhs_complete() serial "lhs" { lhsmerge(); } };

      entry void wait4rhs() {
        when ownrhs_complete(), comrhs_complete(),
             owndif_complete(), comdif_complete() serial "rhs" { solve(); } };

      entry void wait4eval() {
        when diag_complete(), ref_complete(), lhs_complete(),
             resize_complete() serial "eval" { eval(); } };

      entry void ownlhs_complete();
      entry void ownrhs_complete();
      entry void owndif_complete();
      entry void comlhs_complete();
      entry void comrhs_complete();
      entry void comdif_complete();
      entry void diag_complete();
      entry void ref_complete();
      entry void lhs_complete();
      entry void resize_complete();
    };

  } // inciter::

}
