// *****************************************************************************
/*!
  \file      src/Inciter/diagcg.ci
  \copyright 2012-2015, J. Bakosi, 2016-2017, Los Alamos National Security, LLC.
  \brief     Charm++ module interface for continuous Galerkin FEM w/o matrix
  \details   Charm++ module interface file for the continuous Galerkin
     discretization scheme using a diagonal matrix for the left hand side.
  \see       DiagCG.h and DiagCG.C for more info.
*/
// *****************************************************************************

module diagcg {

  extern module transporter;
  extern module discretization;
  extern module solver;

  include "UnsMesh.h";
  include "PUPUtil.h";

  namespace inciter {

    array [1D] DiagCG {
      entry DiagCG( const CProxy_Discretization& disc,
                    const tk::CProxy_Solver& solver );
      entry void setup( tk::real v );
      entry void dt();
      entry [reductiontarget] void advance( tk::real newdt );
      entry void updateSol( const std::vector< std::size_t >& gid,
                            const std::vector< tk::real >& sol );
      entry void updateLowSol( const std::vector< std::size_t >& gid,
                               const std::vector< tk::real >& sol );
      entry void comaec( const std::vector< std::size_t >& gid,
                         const std::vector< std::vector< tk::real > >& P );
      entry void comalw( const std::vector< std::size_t >& gid,
                         const std::vector< std::vector< tk::real > >& Q );
      entry void comlim( const std::vector< std::size_t >& gid,
                         const std::vector< std::vector< tk::real > >& U );

      // SDAG code follows. See http://charm.cs.illinois.edu/manuals/html/
      // charm++/manual.html, Sec. "Structured Control Flow: Structured Dagger".

      // High-level overview of the dependency and asynchronous call structure
      // ---------------------------------------------------------------------
      //
      // Directed Acyclic Graph (DAG):
      // -----------------------------
      //
      // See src/Inciter/DiagCG.h.
      //
      // Interpretation of the above DAG
      // -------------------------------
      // Control flow is from left to right and top to bottom.
      //
      // Only in DEBUG mode, wait4ver(): When the low and high order solutions
      // have been updated, and the own portion of the antidiffusive element
      // contributions (AEC) have been computed, we optionally (inly in DEBUG
      // mode) verify that the AECs assembled to nodes equal to the difference
      // between the high and low order increments. See also
      // FluxCorrector::aec() and FluxCorrector::verify(). Note that this
      // verification is only done if there is only a single DiagCG chare as
      // the correct verification would entail communication for multiple
      // chares. Note also that the DAG conditions below for wait4ver() require
      // the own contributions to the AEC and ALW instead of requiring the low
      // and high order solutions and the own AEC. Requiring the former set (as
      // implemented) is stronger than the latter, because the former can only
      // be satisfied when the latter is also satisfied. The former is
      // implemented because that avoids introducing two more SDAG messages,
      // e.g., lo_complete() and hi_complete(), and that would require 3
      // conditions instead of two, leading to simpler code.
      //
      // Computing limited antidiffusive element contributions, wait4fct():
      // Computing and communicating contributions on chare-boundaries of
      // antidiffusive element contributions (AEC), and the maximum and minimum
      // unknowns of elements surrounding nodes (ALW) are overlapped. See
      // aec(), comaec(), alw(), comalw(). When all are complete on a single
      // chare, computing the limited antidiffusive element contributions can
      // start.
      //
      // Applying the limited antidiffusive element contributions, wait4app():
      // Computing the limited antidiffusive element contributions assembled and
      // applied to mesh nodes involves own and contributions on the
      // chare-boundary nodes. When both are done on a single chare, applying
      // the new limited AECs can be done.
      //
      // Note that the none of wait4ver(), wait4fct(), and wait4app(), nor its
      // underlying computations and communications involve global reductions or
      // broadcasts: the entire FCT algorithm runs completely independent on
      // each DiagCG chare, and exercising task parallelism within.

      #ifndef NDEBUG
      entry void wait4ver() {
        when ownaec_complete(), ownalw_complete() serial "ver" { verify(); } };
      #endif

      entry void wait4fct() {
        when ownaec_complete(), comaec_complete(),
             ownalw_complete(), comalw_complete() serial "fct" { lim(); } };

      entry void wait4app() {
        when ownlim_complete(), comlim_complete() serial "app" { apply(); } };

      entry void ownaec_complete();
      entry void ownalw_complete();
      entry void ownlim_complete();
      entry void comaec_complete();
      entry void comalw_complete();
      entry void comlim_complete();
    };

  } // inciter::

}
