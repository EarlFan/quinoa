// *****************************************************************************
/*!
  \file      src/Inciter/diagcg.ci
  \copyright 2012-2015 J. Bakosi,
             2016-2018 Los Alamos National Security, LLC.,
             2019 Triad National Security, LLC.
             All rights reserved. See the LICENSE file for details.
  \brief     Charm++ module interface for continuous Galerkin FEM w/o matrix
  \details   Charm++ module interface file for the continuous Galerkin
     discretization scheme using a diagonal matrix for the left hand side.
  \see       DiagCG.h and DiagCG.C for more info.
*/
// *****************************************************************************

module diagcg {

  extern module transporter;
  extern module discretization;

  include "UnsMesh.hpp";
  include "PUPUtil.hpp";
  include "Fields.hpp";

  namespace inciter {

    array [1D] DiagCG {
      entry DiagCG( const CProxy_Discretization& disc,
                    const std::map< int, std::vector< std::size_t > >& /* bface */,
                    const std::map< int, std::vector< std::size_t > >& bnode,
                    const std::vector< std::size_t >& /* triinpoel */ );
      initnode void registerReducers();
      entry void setup();
      entry void resizeComm();
      entry void init();
      entry void refine();
      entry [reductiontarget] void advance( tk::real newdt );
      entry void comlhs( const std::vector< std::size_t >& gid,
                         const std::vector< std::vector< tk::real > >& L );
      entry void comrhs( const std::vector< std::size_t >& gid,
                         const std::vector< std::vector< tk::real > >& R,
                         const std::vector< std::vector< tk::real > >& D );
      entry void resized();
      entry void lhs();
      entry void step();

      // SDAG code follows. See http://charm.cs.illinois.edu/manuals/html/
      // charm++/manual.html, Sec. "Structured Control Flow: Structured Dagger".

      entry void wait4lhs() {
        when ownlhs_complete(), comlhs_complete() serial "lhs" { lhsmerge(); } }

      entry void wait4rhs() {
        when ownrhs_complete( tk::Fields& dif ), comrhs_complete()
        serial "rhs" { solve( dif ); } }

      entry void wait4out() {
        when lhs_complete(), resize_complete() serial "out" { out(); } }

      entry void ownlhs_complete();
      entry void comlhs_complete();
      entry void lhs_complete();
      entry void ownrhs_complete( tk::Fields& dif );
      entry void comrhs_complete();
      entry void resize_complete();
    }

  } // inciter::

}
