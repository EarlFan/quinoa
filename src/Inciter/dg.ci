// *****************************************************************************
/*!
  \file      src/Inciter/dg.ci
  \copyright 2012-2015, J. Bakosi, 2016-2018, Los Alamos National Security, LLC.
  \brief     Charm++ module interface file for the discontinuous Galerkin scheme
  \details   Charm++ module interface file for the discontinuous Galerking
             scheme.
  \see       DG.h and DG.C for more info.
*/
// *****************************************************************************

module dg {

  extern module transporter;
  extern module discretization;
  extern module solver;

  include "UnsMesh.h";
  include "PUPUtil.h";
  include "FaceData.h";

  namespace inciter {

    array [1D] DG {
      entry DG( const CProxy_Discretization& disc,
                const tk::CProxy_Solver& solver,
                const FaceData& fd );
      entry void comadj( int fromch, const GhostData& ghost );
      initnode void registerReducers();      
      entry void setup( tk::real v );
      entry void dt();
      entry void eval();
      entry [reductiontarget] void advance( tk::real newdt );

      // SDAG code follows. See http://charm.cs.illinois.edu/manuals/html/
      // charm++/manual.html, Sec. "Structured Control Flow: Structured Dagger".

      // High-level overview of the dependency and asynchronous call structure
      // ---------------------------------------------------------------------
      // ...
      //
      // Directed Acyclic Graph (DAG):
      // -----------------------------
      //
      // See src/Inciter/DG.h.
      //
      // Interpretation of the above DAG
      // -------------------------------
      // Control flow is from left to right and top to bottom.

      entry void wait4adj() {
        when ownadj_complete(), comadj_complete() serial "adj" { adj(); } };

      entry void ownadj_complete();
      entry void comadj_complete();
    };

  } // inciter::

}
