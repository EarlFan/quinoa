// *****************************************************************************
/*!
  \file      src/Inciter/dg.ci
  \copyright 2012-2015 J. Bakosi,
             2016-2018 Los Alamos National Security, LLC.,
             2019 Triad National Security, LLC.
             All rights reserved. See the LICENSE file for details.
  \brief     Charm++ module interface file for the discontinuous Galerkin scheme
  \details   Charm++ module interface file for the discontinuous Galerking
             scheme.
  \see       DG.h and DG.C for more info.
*/
// *****************************************************************************

module dg {

  extern module transporter;
  extern module discretization;

  include "UnsMesh.h";
  include "PUPUtil.h";
  include "FaceData.h";

  namespace inciter {

    array [1D] DG {
      entry DG( const CProxy_Discretization& disc,
                const std::map< int, std::vector< std::size_t > >& bface,
                const std::map< int, std::vector< std::size_t > >& /* bnode */,
                const std::vector< std::size_t >& triinpoel );
      entry void comfac( int fromch, const tk::UnsMesh::FaceSet& infaces );
      entry void comGhost( int fromch, const GhostData& ghost );
      entry void reqGhost();
      initnode void registerReducers();      
      entry void setup( tk::real v );
      entry void next();
      entry void diag();
      entry void comlim( int fromch,
                         const std::vector< std::size_t >& tetid,
                         const std::vector< std::vector< tk::real > >& u,
                         const std::vector< std::size_t >& ndof );
      entry void comsol( int fromch,
                         const std::vector< std::size_t >& tetid,
                         const std::vector< std::vector< tk::real > >& u,
                         const std::vector< std::size_t >& ndofel );
      entry void advance( tk::real );
      entry [reductiontarget] void solve( tk::real newdt );
      entry void resized();
      entry void lhs();
      entry void step();

      // SDAG code follows. See http://charm.cs.illinois.edu/manuals/html/
      // charm++/manual.html, Sec. "Structured Control Flow: Structured Dagger".

      entry void wait4ghost() {
        when ownghost_complete(), reqghost_complete() serial "ghost"
        { sendGhost(); } }

      entry void wait4sol() {
        when ownsol_complete(), comsol_complete() serial "sol"
        { lim(); } }

      entry void wait4lim() {
        when ownlim_complete(), comlim_complete() serial "lim"
        { dt(); } }

      entry void wait4recompghost() {
        when diag_complete(), ref_complete(), resize_complete() serial
        "recomputeGhostRefined" { recompGhostRefined(); } }

      entry void ownghost_complete();
      entry void reqghost_complete();
      entry void ownsol_complete();
      entry void comsol_complete();
      entry void ownlim_complete();
      entry void comlim_complete();
      entry void diag_complete();
      entry void ref_complete();
      entry void resize_complete();
    }

  } // inciter::

}
