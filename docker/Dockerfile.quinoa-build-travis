# vim: filetype=dockerfile:

FROM quinoacomputing/buildenv:alpine

ARG SONARQUBE
ARG SONARQUBE_TOKEN
ARG SONARQUBE_GITHUB_TOKEN
ARG COMPILER
ARG BUILD
ARG SHARED_LIBS
ARG TRAVIS_BRANCH
ARG TRAVIS_PULL_REQUEST
ARG TRAVIS_REPO_SLUG
ARG TRAVIS_COMMIT

ENV RUNNER_ARGS="--bind-to none -oversubscribe" \
    OMPI_MCA_plm=isolated \
    PATH=/opt/openmpi/${COMPILER}/bin:$PATH

COPY quinoa /home/quinoa/quinoa
COPY sonar/ /home/quinoa/.sonar
USER root
RUN chown -R quinoa:quinoa /home/quinoa/quinoa /home/quinoa/.sonar
USER quinoa

WORKDIR /home/quinoa/quinoa
RUN mkdir build

WORKDIR build
RUN cmake \
    -GNinja \
    -DCMAKE_C_COMPILER=mpicc \
    -DCMAKE_CXX_COMPILER=mpicxx \
    -DTPL_DIR="/home/quinoa/tpl/${COMPILER}${SHARED_LIBS:+-static}" \
    -DCMAKE_CXX_FLAGS="-Werror -Wno-zero-as-null-pointer-constant" \
    -DCMAKE_BUILD_TYPE="${BUILD}" \
    ${SHARED_LIBS:+-DBUILD_SHARED_LIBS=$SHARED_LIBS} \
    ${SONARQUBE:+-DCOVERAGE=ON} \
    -DLCOV=/bin/true \
    -DGENHTML=/bin/true \
    ../src
RUN ${SONARQUBE:+build-wrapper-linux-x86-64 --out-dir bw-output} ninja
RUN if [ -z "${SONARQUBE}" ]; then ./charmrun +p2 "${RUNNER_ARGS}" Main/unittest -v -q; fi
RUN if [ -z "${SONARQUBE}" ]; then ctest --output-on-failure -j2 -LE stringent -E "(.*pe[48])"; fi
RUN if [ ${SONARQUBE} ]; then ninja doc; fi
RUN cd .. && if [ ${SONARQUBE} ]; then \
  python -m coverxygen --xml-dir build/doc/xml/ --src-dir . --output doxygen.coverage.info; \
  wget -O codecov.sh https://codecov.io/bash; \
  bash codecov.sh -X gcov -f doxygen.coverage.info -F doxygen; \
  if [ ${COMPILER} = clang ]; then \
    $HOME/.local/bin/codecov -F ${COMPILER} --gcov-exec "llvm-cov gcov"; \
  else \
    $HOME/.local/bin/codecov -F ${COMPILER}; \
    cd build && find . -type f -name '*.gcno' -exec gcov -pb  {} + && \
    find . -type f -name '*.gcov' -not -name '*#quinoa#src*' -delete && \
    find . -type f -name '*.def.h*.gcov' -o -name '*UnitTest#tests*.gcov' -delete; \
  fi; \
fi
RUN cd .. && if [ ${SONARQUBE} ] && [ -n "${SONARQUBE_GITHUB_TOKEN}" ] && [ -n "${SONARQUBE_TOKEN}" ]; then \
  sonar-scanner \
    -Dsonar.projectKey=${TRAVIS_REPO_SLUG#*/} \
    -Dsonar.projectName=${TRAVIS_REPO_SLUG#*/} \
    -Dsonar.projectVersion=${TRAVIS_COMMIT} \
    -Dsonar.branch=/${TRAVIS_BRANCH} \
    -Dsonar.links.homepage=http://quinoacomputing.org \
    -Dsonar.links.ci=https://travis-ci.org/${TRAVIS_REPO_SLUG} \
    -Dsonar.links.scm=https://github.com/${TRAVIS_REPO_SLUG} \
    -Dsonar.links.issue=https://github.com/${TRAVIS_REPO_SLUG}/issues \
    -Dsonar.sources=src \
    -Dsonar.inclusions=**/*.C,**/*.c,**/*.h \
    -Dsonar.exclusions=build/CMakeFiles/**,**/*.decl.h,**/*.def.h \
    -Dsonar.cfamily.build-wrapper-output=build/bw-output \
    -Dsonar.cfamily.gcov.reportsPath=build \
    -Dsonar.host.url=https://sonarcloud.io \
    -Dsonar.organization=${TRAVIS_REPO_SLUG%%/*} \
    $([ $TRAVIS_PULL_REQUEST != false ] && echo \
      "-Dsonar.analysis.mode=preview \
       -Dsonar.github.pullRequest=$TRAVIS_PULL_REQUEST \
       -Dsonar.github.repository=$TRAVIS_REPO_SLUG \
       -Dsonar.github.oauth=$SONARQUBE_GITHUB_TOKEN") \
    -Dsonar.login=${SONARQUBE_TOKEN}; \
fi
USER root
RUN ninja install
USER quinoa
RUN export PATH=/usr/local/bin:$PATH && unittest -h && inciter && rngtest && meshconv && walker
WORKDIR /home/quinoa
